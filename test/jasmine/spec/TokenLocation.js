// Generated by CoffeeScript 1.6.3
(function() {
  define(function(require, exports, module) {
    var generate, it_locates, it_runs, locateToken, runTest, test_names;
    test_names = ["amps_and_angles_encoding", "auto_links", "autolink_lines", "backslash_escapes", "blockquote_list_item", "blockquotes_with_code_blocks", "case_insensitive_refs", "code_blocks", "code_spans", "double_link", "escaped_angles", "gfm_code", "gfm_code_hr_list", "gfm_del", "gfm_em", "gfm_links", "gfm_tables", "horizontal_rules", "hr_list_break", "inline_html_advanced", "inline_html_comments", "inline_html_simple", "lazy_blockquotes", "links_inline_style", "links_reference_style", "links_shortcut_references", "list_item_text", "literal_quotes_in_titles", "loose_lists", "main", "markdown_documentation_basics", "markdown_documentation_syntax", "nested_blockquotes", "nested_code", "nested_em", "nested_square_link", "not_a_link", "ordered_and_unordered_lists", "ref_paren", "strong_and_em_together", "tabs", "tidyness", "toplevel_paragraphs.gfm", "tricky_list"];
    runTest = function(name, test, done) {
      var data_path, html_path, md_path;
      data_path = "../../tests/";
      md_path = "" + data_path + name + ".text";
      html_path = "" + data_path + name + ".html";
      return require.async([md_path, html_path], function(md, html) {
        return typeof test === "function" ? test(md, html, done) : void 0;
      });
    };
    generate = function(md, html, done) {
      var actual, expected;
      actual = marked(md).replace(/\s/g, '');
      expected = html.replace(/\s/g, '');
      expect(actual).toEqual(expected);
      return done();
    };
    it_runs = function(name) {
      var should;
      should = "should parses '" + name + "'";
      return it(should, function(done) {
        return runTest(name, generate, done);
      });
    };
    locateToken = function(md, html, done) {
      var l, token, tokens, _i, _len;
      tokens = marked.lexer(md);
      for (_i = 0, _len = tokens.length; _i < _len; _i++) {
        token = tokens[_i];
        l = token.loc;
        expect(l != null).toBe(true);
      }
      return done();
    };
    it_locates = function(name) {
      var should;
      should = "should locates '" + name + "'";
      return it(should, function(done) {
        return runTest(name, locateToken, done);
      });
    };
    return exports = describe("Marked.Js", function() {
      it('should exists', function() {
        return expect(typeof marked !== "undefined" && marked !== null).toBe(true);
      });
      marked.setOptions({
        renderer: new marked.Renderer(),
        gfm: true,
        tables: true,
        breaks: false,
        pedantic: false,
        sanitize: false,
        smartLists: true,
        smartypants: false
      });
      describe('Baseline - Some of the orignal tests', function() {
        var name, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = test_names.length; _i < _len; _i++) {
          name = test_names[_i];
          _results.push(it_runs(name));
        }
        return _results;
      });
      return describe('Token', function() {
        var name, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = test_names.length; _i < _len; _i++) {
          name = test_names[_i];
          _results.push(it_locates(name));
        }
        return _results;
      });
    });
  });

}).call(this);
